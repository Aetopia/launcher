name: Build release launcher and bump version
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.update_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: setup git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"
      - name: update file version
        id: update_version
        run: |
          #parsed string
          export new_version=$(cat WpfApp5/AssemblyInfo.cs | grep "\[assembly: AssemblyVersion" | sed -E 's/.*AssemblyVersion\("([^"]+)"\).*/\1/' | awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo $new_version
          sed -i "s/AssemblyVersion(\"[^"]\+\")/AssemblyVersion(\"$new_version\")/" WpfApp5/AssemblyInfo.cs
      - name: push version bump to origin
        run: |
          git add WpfApp5/AssemblyInfo.cs
          git commit -m "Bump launcher version to ${{ steps.update_version.outputs.new_version }}"
          git push origin main

  deploy:
    needs: bump-version
    runs-on: windows-latest
    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: check commit type
        shell: bash
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"release:"* ]]; then
            echo "Continuing to build as release"
          else
            echo "Not a release commit, exiting (note: this may take 5-10 seconds)"
            gh run cancel ${{ github.run_id }}
            gh run watch ${{ github.run_id }}
          fi
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: WpfApp5/global.json

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build
        run: |
          cd WpfApp5
          msbuild -t:Restore Flarial.Launcher.csproj
          msbuild /m Flarial.Launcher.csproj
          cd D:\a\launcher\launcher\WpfApp5\bin\Debug\net481\win-x64
          ls
      - name: Checkout cdn repository
        uses: actions/checkout@v4
        with:
          repository: 'flarialmc/newcdn'
          ref: 'main'
          path: 'cdn'
          token: ${{secrets.ACTIONS_GITHUB_TOKEN}}

      - name: Setup git config for cdn
        run: |
          cd cdn
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@example.com"
      - name: Upload to newcdn
        run: |
          cd cdn
          cp D:/a/launcher/launcher/WpfApp5/bin/Debug/net481/win-x64/Flarial.Launcher.exe ./launcher/Flarial.Launcher.exe
          git add Launcher/Flarial.Launcher.exe
          git commit -m "Update launcher to version ${{ needs.bump-version.outputs.new_version }}"
          git push origin main

  bump-cdn-version:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout cdn repository
        uses: actions/checkout@v4
        with:
          repository: 'ttf-fog/newcdn'
          ref: 'main'
          token: ${{secrets.ACTIONS_GITHUB_TOKEN}}
      - name: setup git config for cdn
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@example.com"
      - name: update cdn launcher version
        run: |
          echo "${{ needs.deploy.outputs.new_version }}"
          export new_version="${{ needs.deploy.outputs.new_version }}"
          contents="$(jq '.version = "'$new_version'"' launcher/launcherVersion.txt)" && \
          echo -E "${contents}" > launcher/launcherVersion.txt
          cat launcher/launcherVersion.txt
          git add launcher/launcherVersion.txt
          git commit -m "Bump launcher version to ${{ needs.deploy.outputs.new_version }}"
          git push origin main