bump-version-number:
  runs-on: ubuntu-latest
  outputs:
    version: ${{ steps.set_output.outputs.version }}
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Git
      run: |
        git config --global user.name "Github Actions"
        git config --global user.email "actions@github.com"

    - name: Check if AssemblyInfo.cs contains version
      run: |
        echo "Checking AssemblyInfo.cs for version..."
        if ! grep -q "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*" WpfApp5/AssemblyInfo.cs; then
          echo "Version not found in AssemblyInfo.cs. Please ensure the version is specified correctly in the file."
          exit 1
        fi

    - name: Update file version in AssemblyInfo.cs
      id: bump_version
      run: |
        # Extract the current version from AssemblyInfo.cs
        export old_version=$(sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' WpfApp5/AssemblyInfo.cs)
        
        if [[ -z "$old_version" ]]; then
          echo "No version found in AssemblyInfo.cs. Exiting..."
          exit 1
        fi
        
        # Get the new version (incrementing the last segment)
        export new_version=$(sed -n '2p' WpfApp5/AssemblyInfo.cs | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' | \
          awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          
        if [[ -z "$new_version" ]]; then
          echo "Failed to compute new version. Exiting..."
          exit 1
        fi
        
        echo "Old version: $old_version"
        echo "New version: $new_version"
        
        # Export version for downstream steps
        echo "version=$new_version" >> $GITHUB_ENV
        echo "$new_version" > version.txt
        # Update the version in AssemblyInfo.cs
        sed -i "s/$old_version/$new_version/g" WpfApp5/AssemblyInfo.cs

    - name: Commit bumped version in repository
      run: |
        git add WpfApp5/AssemblyInfo.cs
        git commit -m "Update file version"
        git push origin main

    - name: Set output version
      id: set_output
      run: |
        version=$(cat version.txt)
        echo "::set-output name=version::$version"
