name: Build release launcher and bump version

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  bump-version-number:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_output.outputs.version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.name "Github Actions"
          git config --global user.email "actions@github.com"

      - name: Update file version in AssemblyInfo.cs
        id: bump_version
        run: |
          # Extract the current version from AssemblyInfo.cs
          export old_version=$(sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' WpfApp5/AssemblyInfo.cs)
          # Get the new version (incrementing the last segment)
          export new_version=$(sed -n '2p' WpfApp5/AssemblyInfo.cs | sed -n 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p' | \
            awk -F. -v OFS=. 'NF==1{print ++$NF}; NF>1{if(length($NF+1)>length($NF))$(NF-1)++; $NF=sprintf("%0*d", length($NF), ($NF+1)%(10^length($NF))); print}')
          echo "Old version: $old_version"
          echo "New version: $new_version"
          # Export version for downstream steps
          echo "version=$new_version" >> $GITHUB_ENV
          echo "$new_version" > version.txt
          # Update the version in AssemblyInfo.cs
          sed -i "s/$old_version/$new_version/g" WpfApp5/AssemblyInfo.cs

      - name: Commit bumped version in repository
        run: |
          git add WpfApp5/AssemblyInfo.cs
          git commit -m "Update file version"
          git push origin main

      - name: Set output version
        id: set_output
        run: |
          version=$(cat version.txt)
          echo "::set-output name=version::$version"

  deploy:
    needs: bump-version-number
    runs-on: windows-latest
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Check commit type
        shell: bash
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"release:"* ]]; then
              echo "This is a release commit. Newcdn update steps will run."
          else
              echo "Not a release commit. Newcdn update steps will be skipped."
          fi

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: WpfApp5/global.json

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Build launcher
        run: |
          cd WpfApp5
          msbuild -t:Restore Flarial.Launcher.csproj
          msbuild /m Flarial.Launcher.csproj
          cd $env:GITHUB_WORKSPACE\WpfApp5\bin\Debug\net481\win-x64
          ls

      - name: Checkout newcdn repository for launcher update
        if: contains(github.event.head_commit.message, 'release:')
        uses: actions/checkout@v4
        with:
          repository: 'flarialmc/newcdn'
          ref: 'main'
          path: 'cdn'
          token: ${{ secrets.ACTIONS_GITHUB_TOKEN }}

      - name: Setup Git config for newcdn update
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@example.com"

      - name: Update launcher executable in newcdn
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          cd cdn
          cp "$env:GITHUB_WORKSPACE\WpfApp5\bin\Debug\net481\win-x64\Flarial.Launcher.exe" launcher/Flarial.Launcher.exe
          git add launcher/Flarial.Launcher.exe
          git commit -m "Update launcher"
          git push origin main

      - name: Update newcdn launcher version file
        if: contains(github.event.head_commit.message, 'release:')
        run: |
          cd cdn
          echo "Using new version: ${{ needs.bump-version-number.outputs.version }}"
          export new_version="${{ needs.bump-version-number.outputs.version }}"
          contents="$(jq '.version = "'$new_version'"' launcher/launcherVersion.txt)" && \
          echo -E "${contents}" > launcher/launcherVersion.txt
          cat launcher/launcherVersion.txt
          git add launcher/launcherVersion.txt
          git commit -m "Bump launcher version"
          git push origin main
